@page "/"
@using cliente.Modelos
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<h1>Cat√°logo de Autos</h1>

<div class="d-flex mb-3">
    <input @bind="buscar" @bind:event="oninput" placeholder="Buscar autos..." class="form-control me-2" style="max-width:300px;" />
    <button class="btn btn-outline-primary" @onclick="IrAlCarrito">Ver carrito</button>
</div>

<div class="row">
    @if (productos is null)
    {
        <p>Buscando autos...</p>
    }
    else if (productos.Count == 0)
    {
        <p>No se encontraron productos.</p>
    }
    else
    {
        @foreach (var p in productos)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img src="@p.ImagUrl" class="card-img-top" style="height:200px;object-fit:cover;" />
                    <div class="card-body">
                        <h5 class="card-title">@p.Nombre</h5>
                        <p class="card-text">@p.Descripcion</p>
                        <p>Stock: @p.Stock</p>
                        <p><b>$@p.Precio</b></p>
                        <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(p.Id)">Agregar al carrito</button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    List<Producto> productos;
    string buscar = "";

    protected override async Task OnInitializedAsync()
    {
        await BuscarProductos();
    }

    async Task BuscarProductos()
    {
        var url = string.IsNullOrWhiteSpace(buscar) ? "productos" : $"productos?buscar={buscar}";
        productos = await Http.GetFromJsonAsync<List<Producto>>(url);
    }

    async Task<string> ObtenerOCrearCarritoId()
    {
        var carritoId = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (string.IsNullOrEmpty(carritoId))
        {
            var response = await Http.PostAsync("carritos", null);
            carritoId = await response.Content.ReadAsStringAsync();
            carritoId = carritoId.Replace("\"", "").Trim(); 
            await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId);
        }
        return carritoId;
    }

    async Task AgregarAlCarrito(int productoId)
    {
        var carritoId = await ObtenerOCrearCarritoId();
        await Http.PutAsync($"carritos/{carritoId}/{productoId}?cantidad=1", null);
    }

    void IrAlCarrito()
    {
        Nav.NavigateTo("/carrito");
    }
}